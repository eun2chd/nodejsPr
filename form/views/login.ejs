<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>동적 폼 전송</title>

<!-- jQuery CDN -->
<script
src="https://code.jquery.com/jquery-3.7.1.min.js"
integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
crossorigin="anonymous"
></script>

<!-- axios CDN -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<style>
div.result {
  font-size: 24px;
  font-weight: 700;
}
</style>
</head>
<body>
<h1>동적 폼 전송 연습하기!</h1>

<!-- 이름, 성별을 입력받는 폼 -->
<form name="register">
<label for="username">이름</label>
<input type="text" name="username" id="username" />
<br />

<fieldset>
  <legend>성별</legend>
  <input type="radio" name="gender" id="male" value="남자" />
  <label for="male">남자</label>
  <input type="radio" name="gender" id="female" value="여자" />
  <label for="female">여자</label>
</fieldset>
<br />
<button type="button" onclick="ajaxGet()">Ajax Get 제출</button>
<button type="button" onclick="ajaxPost()">Ajax Post 제출</button>
<br />
<button type="button" onclick="axiosGet()">axios Get 제출</button>
<button type="button" onclick="axiosPost()">axios post 제출</button>


<button type="button" onclick="fetchGet()">fetchGet 제출</button>
<button type="button" onclick="fetchPost()">fetchPost 제출</button>
</form>

<!-- 동적 폼 전송 결과를 보여줄 곳 -->
<div class="result"></div>

<script>
const resultBox = document.querySelector(".result");
function ajaxGet() {
  console.log("ajaxGet 함수 호출!");

  // 폼 선택
  const form = document.forms["register"];
  console.log(form);
  console.log(form.username.value); // 이름 입력 값
  console.log(form.gender.value); // 성별 입력 값

  // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
  const data = {
    name: form.username.value,
    gender: form.gender.value,
  };

  // Ajax로 서버에 GET 요청 보내기
  $.ajax({
    type: "get", // 요청의 종류 (=form의 method 속성)
    url: "/ajax", // 요청의 경로 (=form의 action 속성)
    data: data, // 요청에 실어보낼 데이터
    success: function (data) {
      // 요청이 성공적으로 수행되었을 때 실행 될 함수
      console.log("success > ", data);
      resultBox.textContent = `Get /ajax 요청 완료! ${data.name}님의 성별은 ${data.gender}네요~`;
    },
  });
}

function ajaxPost() {
  console.log("ajaxPost 함수 호출!");

  // 폼 선택
  const form = document.forms["register"];

  // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
  const data = {
    name: form.username.value,
    gender: form.gender.value,
  };

  // Ajax로 서버에 POST 요청 보내기
  $.ajax({
    type: "post", // 요청의 종류 (=form의 method 속성)
    url: "/ajax", // 요청의 경로 (=form의 action 속성)
    data: data, // 요청에 실어보낼 데이터
    success: function (data) {
      // 요청이 성공적으로 수행되었을 때 실행 될 함수
      console.log("success > ", data);
      resultBox.textContent = `Post /ajax 요청 완료! ${data.name}님의 성별은 ${data.gender}네요~`;
    },
  });
}

async function axiosGet() {
  console.log("axiosGet 함수 호출!");

  // 폼 선택
  const form = document.forms["register"];

  // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
  const data = {
    name: form.username.value,
    gender: form.gender.value,
  };

  // axios 요청의 결과는 Promise 객체
  // -> then-catch 메서드로 체이닝 가능
  // -> async/await 도 사용 가능

  // axios({
  //   method: "get",
  //   url: "/axios",
  //   params: data,
  // })
  //   .then((response) => {
  //     console.log(response); // 서버의 응답 결과 (response.data : 응답 데이터)
  //     resultBox.textContent = `Get /axios 요청 완료! ${response.data.name}님의 성별은 ${response.data.gender}네요~`;
  //   })
  //   .catch((error) => {
  //     console.log("error", error);
  //   });

  // 퀴즈. async/await 으로 변경하기
  const response = await axios({
    method: "get",
    url: "/axios",
    params: data,
  });
  const { name, gender } = response.data;
  resultBox.textContent = `Get /axios 요청 완료! ${name}님의 성별은 ${gender}네요~`;
  }


function axiosPost() {
    console.log("ajaxPost 함수 호출!");
  
    // 폼 선택
    const form = document.forms["register"];
  
    // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
    const data = {
      name: form.username.value,
      gender: form.gender.value,
    };
  
    // Ajax로 서버에 POST 요청 보내기
    $.ajax({
      type: "post", // 요청의 종류 (=form의 method 속성)
      url: "/axios", // 요청의 경로 (=form의 action 속성)
      data: data, // 요청에 실어보낼 데이터
      success: function (data) {
        // 요청이 성공적으로 수행되었을 때 실행 될 함수
        console.log("success > ", data);
        resultBox.textContent = `Post /ajax 요청 완료! ${data.name}님의 성별은 ${data.gender}네요~`;
      },
    });

  }


function fetchGet() {
  console.log("fetchGet 함수 호출!");
  
  // 폼 선택
  const form = document.forms["register"];

  // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
  const data = {
    name: form.username.value,
    gender: form.gender.value,
  };

  // fetch는 dafault 로 get 방식으로 작동(생략 가능)
  fetch(`/fetch?name=${data.name}&gender=${data.gender}`).then(
    (response) => {
      console.log(response);
      // JSON 형태로 응답 데이터를 전달받는다. 응답 객체는 json() 메서드를 제공한다.
      // 응답 객체로부터 JOSN 포맷의 응답 전문을 자바스크립트 객체로 변환해야한다.
      // response return 하고 다음 then 에서 써야함
      return response.json();
  }).then( (data) => {
    console.log(data);
    resultBox.textContent = `fetchGet 요청 완료! ${data.name}님의 성별은 ${data.gender}네요~`;
  })
}


function fetchPost() {
  console.log("fetchPost 함수 호출!");
  
  // 폼 선택
  const form = document.forms["register"];

  // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
  const data = {
    name: form.username.value,
    gender: form.gender.value,
  };

  // fetch 를 이용해 post 요청을 보낼때는 option 객체가 필요함
  // 1. method 키 post 지정
  // 2. headers 키 JSON 포맷 사용 선언
  // 3. body 키 서버로 보낼 데이터 지정
  
  fetch("/fetch", {
    method : "post",
    headers : {
      "Content-Type" : "application/json",
    },
    body : JSON.stringify(data), // js obj -> json
  }).then((response) => {
    console.log(response);
    return response.json();
  }).then( (data) => {
    resultBox.textContent = `fetchPost 요청 완료! ${data.name}님의 성별은 ${data.gender}네요~`;
  }) 
}


</script>
</body>
</html>